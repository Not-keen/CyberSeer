import tkinter as tk
from tkinter import ttk, scrolledtext
import subprocess
import threading
import platform
import os
import json

class VulnerabilityAssessment:
    def __init__(self, master):
        self.master = master
        master.title("CyberSeer - System Security Scan")
        master.geometry("1000x600")
        master.configure(bg='#0a0e14')

        self.create_widgets()
        self.security_score = 100  # Start with a perfect score

    def create_widgets(self):
        main_frame = tk.Frame(self.master, bg='#0a0e14')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(main_frame, text="System Security Scan", 
                               font=("Courier", 24, "bold"), fg='#00ffff', bg='#0a0e14')
        title_label.pack(pady=(0, 20))

        self.start_button = ttk.Button(main_frame, text="Start Assessment", command=self.start_assessment)
        self.start_button.pack(pady=(0, 20))

        self.progress_bar = ttk.Progressbar(main_frame, length=400, mode='determinate', style="TProgressbar")
        self.progress_bar.pack(pady=(0, 20))

        self.score_label = tk.Label(main_frame, text="Security Score: N/A", 
                                    font=("Courier", 18, "bold"), fg='#00ffff', bg='#0a0e14')
        self.score_label.pack(pady=(0, 20))

        notebook = ttk.Notebook(main_frame)
        notebook.pack(expand=True, fill='both')

        log_frame = tk.Frame(notebook, bg='#0a0e14')
        notebook.add(log_frame, text="Log")

        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, bg='#0a0e14', fg='#00ffff', font=("Courier", 10))
        self.log_text.pack(expand=True, fill='both')

        results_frame = tk.Frame(notebook, bg='#0a0e14')
        notebook.add(results_frame, text="Results")

        style = ttk.Style()
        style.configure("Treeview", 
                        background="#0a0e14",
                        foreground="#00ffff",
                        fieldbackground="#0a0e14")
        style.configure("Treeview.Heading", 
                        background="#1a1f29", 
                        foreground="#00ffff", 
                        font=("Courier", 10, "bold"))
        style.map('Treeview', background=[('selected', '#1a1f29')])

        self.results_tree = ttk.Treeview(results_frame, columns=('Category', 'Result', 'Status'), show='headings', style="Treeview")
        self.results_tree.pack(expand=True, fill='both', side='left')
        for col in ('Category', 'Result', 'Status'):
            self.results_tree.heading(col, text=col, anchor='w')
            self.results_tree.column(col, anchor='w', width=150)

        results_scrollbar = ttk.Scrollbar(results_frame, orient="vertical", command=self.results_tree.yview)
        results_scrollbar.pack(side='right', fill='y')
        self.results_tree.configure(yscrollcommand=results_scrollbar.set)

    def start_assessment(self):
        self.log_text.delete(1.0, tk.END)
        self.results_tree.delete(*self.results_tree.get_children())
        self.progress_bar['value'] = 0
        self.security_score = 100
        threading.Thread(target=self.run_assessment).start()

    def run_assessment(self):
        self.log("Starting system security scan...")

        checks = [
            self.check_firewall,
            self.check_open_ports,
            self.check_user_permissions,
            self.check_ssh_config,
            self.check_password_policy,
            self.check_system_updates,
            self.check_antivirus
        ]

        total_checks = len(checks)
        for i, check in enumerate(checks):
            check()
            self.progress_bar['value'] = ((i + 1) / total_checks) * 100
            self.master.update_idletasks()

        self.log("\nSystem security scan completed.")
        self.score_label.config(text=f"Security Score: {self.security_score}")
        self.save_score()

    def check_firewall(self):
        self.log("Checking firewall status...")
        firewalls = ["ufw", "iptables", "firewalld", "ipfire", "opnsense", "pfsense", "openwrt", "clearos", "zenarmor", "endian", "gufw", "shorewall", "vuurmuur", "vyos", "smoothwall", "arista", "nebero"]
        firewall_active = False
        for firewall in firewalls:
            try:
                if firewall == "ufw":
                    result = subprocess.run(["sudo", "ufw", "status"], capture_output=True, text=True)
                    if "Status: active" in result.stdout:
                        firewall_active = True
                        break
                elif firewall == "iptables":
                    result = subprocess.run(["sudo", "iptables", "-L"], capture_output=True, text=True)
                    if result.returncode == 0 and len(result.stdout.strip()) > 0:
                        firewall_active = True
                        break
                elif firewall == "firewalld":
                    result = subprocess.run(["sudo", "firewall-cmd", "--state"], capture_output=True, text=True)
                    if "running" in result.stdout:
                        firewall_active = True
                        break
            except Exception as e:
                self.log(f"Error checking {firewall}: {str(e)}")

        if firewall_active:
            self.log("Firewall is active.")
            self.add_result("Firewall", "Active", "Informational")
        else:
            self.log("No active firewall detected.")
            self.add_result("Firewall", "Inactive", "Critical")
            self.security_score -= 20

    def check_open_ports(self):
        self.log("Checking for open ports...")
        try:
            result = subprocess.run(["ss", "-tuln"], capture_output=True, text=True)
            open_ports = len([line for line in result.stdout.split('\n') if 'LISTEN' in line])
            self.log(f"Open ports: {open_ports}")
            if open_ports > 10:
                self.add_result("Open Ports", f"{open_ports} ports open", "Critical")
                self.security_score -= 10
            elif open_ports > 5:
                self.add_result("Open Ports", f"{open_ports} ports open", "Warning")
                self.security_score -= 5
            else:
                self.add_result("Open Ports", f"{open_ports} ports open", "Warning")
        except Exception as e:
            self.log(f"Error checking open ports: {str(e)}")
            self.add_result("Open Ports", "Error checking", "Warning")

    def check_user_permissions(self):
        self.log("Checking user permissions...")
        try:
            result = subprocess.run(["whoami"], capture_output=True, text=True)
            current_user = result.stdout.strip()
            self.log(f"Current user: {current_user}")
            if current_user == "root":
                self.log("Warning: Running as root user. Consider using a non-privileged account.")
                self.add_result("User Permissions", "Running as root", "Critical")
                self.security_score -= 15
            else:
                self.add_result("User Permissions", "Non-root user", "Informational")
        except Exception as e:
            self.log(f"Error checking user permissions: {str(e)}")
            self.add_result("User Permissions", "Error checking", "Warning")

    def check_ssh_config(self):
        self.log("Checking SSH configuration...")
        ssh_config_path = "/etc/ssh/sshd_config"
        if os.path.exists(ssh_config_path):
            try:
                with open(ssh_config_path, 'r') as f:
                    config = f.read()
                if "PermitRootLogin yes" in config:
                    self.log("Warning: Root login is allowed via SSH.")
                    self.add_result("SSH Config", "Root login allowed", "Critical")
                    self.security_score -= 10
                else:
                    self.add_result("SSH Config", "Root login disabled", "Informational")
            except Exception as e:
                self.log(f"Error reading SSH config: {str(e)}")
                self.add_result("SSH Config", "Error checking", "Warning")
        else:
            self.log("SSH server is not installed.")
            self.add_result("SSH Config", "Not installed", "Informational")

    def check_password_policy(self):
        self.log("Checking password policy...")
        try:
            result = subprocess.run(["sudo", "cat", "/etc/security/pwquality.conf"], capture_output=True, text=True)
            if "minlen" in result.stdout:
                self.log("Password policy is configured.")
                self.add_result("Password Policy", "Configured", "Informational")
            else:
                self.log("Password policy is not configured.")
                self.add_result("Password Policy", "Not configured", "Warning")
                self.security_score -= 10
        except Exception as e:
            self.log(f"Error checking password policy: {str(e)}")
            self.add_result("Password Policy", "Error checking", "Warning")

    def check_system_updates(self):
        self.log("Checking for system updates...")
        try:
            if platform.system() == "Linux":
                result = subprocess.run(["sudo", "apt", "list", "--upgradable"], capture_output=True, text=True)
                updates = len([line for line in result.stdout.split('\n') if '/' in line])
                self.log(f"Available updates: {updates}")
                if updates > 0:
                    self.add_result("System Updates", f"{updates} updates available", "Warning")
                    self.security_score -= min(updates, 20)  # Deduct up to 20 points
                else:
                    self.add_result("System Updates", "Up to date", "Informational")
            else:
                self.log("System update check is only supported on Linux.")
                self.add_result("System Updates", "Not checked", "Warning")
        except Exception as e:
            self.log(f"Error checking system updates: {str(e)}")
            self.add_result("System Updates", "Error checking", "Warning")

    def check_antivirus(self):
        self.log("Checking for antivirus software...")
        antivirus_tools = ["clamav", "sophos", "comodo", "bitdefender", "avg", "avast", "eset", "kaspersky", "f-prot", "mcafee", "avira", "chrootkit", "rkhunter", "totalav", "trend", "f-secure", "malwarebytes", "redhat", "yara", "maldet"]
        av_installed = False
        for av in antivirus_tools:
            try:
                result = subprocess.run(["which", av], capture_output=True, text=True)
                if result.returncode == 0:
                    self.log(f"{av.capitalize()} antivirus is installed.")
                    av_installed = True
                    break
            except Exception as e:
                self.log(f"Error checking for {av}: {str(e)}")

        if av_installed:
            self.add_result("Antivirus", f"Installed ({av.capitalize()})", "Informational")
        else:
            self.log("No known antivirus software detected.")
            self.add_result("Antivirus", "Not detected", "Critical")
            self.security_score -= 15

    def log(self, message):
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)

    def add_result(self, category, result, status):
        tag = status.lower()
        self.results_tree.insert('', 'end', values=(category, result, status), tags=(tag,))
        self.results_tree.tag_configure(tag, foreground=self.get_status_color(status))
        
    def get_status_color(self, status):
        return {
            "Informational": "#00ff00",
            "Warning": "#ffff00",
            "Critical": "#ff0000"
        }.get(status, "#ffffff")

    def save_score(self):
        try:
            with open("system_security_score.txt", "w") as f:
                f.write(str(self.security_score))
            self.log("System security score saved.")
            
            results = []
            for item in self.results_tree.get_children():
                results.append(self.results_tree.item(item)['values'])
            
            with open("system_scan_results.json", "w") as f:
                json.dump(results, f)
            
        except Exception as e:
            self.log(f"Error saving system security score and results: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = VulnerabilityAssessment(root)
    root.mainloop()
